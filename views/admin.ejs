<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Admin - Configuration Editor</title>
  <link rel="stylesheet" href="/styles.css" />
  <style>
      button{
        padding:10px;
      }
  </style>
</head>
<body>
  <div class="titleDiv">
    <h1>System Configuration Editor</h1>
    <% if (message) { %>
      <div class="message"><%= message %></div>
    <% } %>
  </div>

  <div class="container">
    <div class="tab-container">
      <div class="tab-buttons">
        <button class="tab-button active" data-tab="discounts">Discounts</button>
        <button class="tab-button" data-tab="ppus">PPUs</button>
        <button class="tab-button" data-tab="volume">Volume Pricing</button>
      </div>

      <!-- Discounts Tab -->
        <div id="discounts" class="tab-content active">
        <h2>Discount Settings</h2>
        <form action="/admin/updateDiscounts" method="POST">
            <div class="variable-grid">
            <% if (discountRules.commitments) { %>
                <% discountRules.commitments.forEach((commitment, index) => { %>
                <div class="variable-card">
                    <h3><%= commitment.name %></h3>
                    <label>Discount Percentage</label>
                    <input type="number" name="commitments[<%= commitment.key %>]" 
                        value="<%= (commitment.value * 100).toFixed(2) %>" step="0.01" min="0" max="100">
                </div>
                <% }) %>
            <% } %>

            <div class="variable-card">
                <h3>Current Subscriber Discount</h3>
                <label>Additional Discount (%)</label>
                <input type="number" name="currentSubscriber" 
                    value="<%= (discountRules.currentSubscriber * 100).toFixed(2) %>" step="0.01" min="0" max="100">
            </div>
            </div>
            <div class="button-group">
            <button type="submit">Update Discounts</button>
            </div>
        </form>
        </div>

        <!-- PPUs Tab -->
        <div id="ppus" class="tab-content">
          <h2>Per-User Pricing (PPU)</h2>
          <form action="/admin/updatePPUs" method="POST">
            <div class="variable-grid">
              <% Object.entries(ppus).forEach(([currency, values]) => { %>
                <div class="variable-card">
                  <h3><%= currency %></h3>
                  <label>Price</label>
                  <input type="number" name="ppus[<%= currency %>][standard]" 
                        value="<%= values.standard.toFixed(2) %>" step="0.01" min="0">
                </div>
              <% }) %>
            </div>
            <div class="button-group">
              <button type="submit">Update PPUs</button>
            </div>
          </form>
        </div>

        <!-- Volume Pricing Tab -->
        <div id="volume" class="tab-content">
          <h2>Volume Pricing Tiers</h2>

          <div class="base-prices-section">
            <h2>Base Prices (per user)</h2>
            <form action="/admin/updateBasePrices" method="POST">
              <div class="variable-grid">
                <div class="variable-card">
                  <h3>Base Prices</h3>
                  <% Object.entries(basePrices.subscriptions).forEach(([currency, price]) => { %>
                    <label><%= currency %> Price</label>
                    <input type="number" name="subscriptions[<%= currency %>]" 
                          value="<%= typeof price === 'number' ? price.toFixed(2) : '0.00' %>" 
                          step="0.01" min="0" required>
                  <% }) %>
                </div>
              </div>
              <div class="button-group">
                <button type="submit">Update Base Prices</button>
              </div>
            </form>
          </div>

          <h2>Volume Pricing Tiers</h2>
          <form action="/admin/updateVolumePricing" method="POST">
            <div class="variable-grid">
              <% volumePricing.forEach((tier) => { %>
                <div class="variable-card">
                  <h3><%= tier.userCount.toLocaleString() %> Users</h3>
                  <input type="hidden" name="tiers[<%= tier.id %>][id]" value="<%= tier.id %>">
                  <input type="hidden" name="tiers[<%= tier.id %>][userCount]" value="<%= tier.userCount %>">
                  
                  <label>Volume Discount %</label>
                  <input type="number" name="tiers[<%= tier.id %>][volumeDiscount]" 
                        value="<%= (tier.volumeDiscount * 100).toFixed(2) %>" step="0.01" min="0" max="100">
                  
                  <% if (tier.subscriptions && typeof tier.subscriptions === 'object') { %>
                    <% Object.entries(tier.subscriptions).forEach(([currency, price]) => { %>
                      <label><%= currency %> Price</label>
                      <input type="number" name="tiers[<%= tier.id %>][subscriptions][<%= currency %>]" 
                        value="<%= typeof price === 'number' ? price.toFixed(2) : '0.00' %>" step="0.01" min="0">
                    <% }) %>
                  <% } else { %>
                    <!-- Fallback: show message that subscriptions need to be configured -->
                    <p style="color: orange;">No subscription pricing configured for this tier</p>
                  <% } %>
                  
                  <button type="button" class="delete-tier" data-tier-id="<%= tier.id %>">Delete Tier</button>
                </div>
              <% }) %>
            </div>
            <div class="button-group">
              <button type="submit">Update Volume Pricing</button>
            </div>
          </form>

        <div class="add-tier-form">
        <h3>Add New Pricing Tier</h3>
        <form action="/admin/addVolumeTier" method="POST">
          <div class="form-group">
            <label>User Count</label>
            <input type="number" name="userCount" required min="1">
          </div>
          <div class="form-group">
            <label>Volume Discount (%)</label>
            <input type="number" name="volumeDiscount" step="0.01" min="0" max="100" required>
          </div>
          <% Object.keys(currencies).forEach(currency => { %>
            <div class="form-group">
              <label><%= currency %> Price</label>
              <input type="number" name="subscriptions[<%= currency %>]" step="0.01" min="0" required>
            </div>
          <% }) %>
          <button type="submit">Add New Tier</button>
        </form>
      </div>
        </div>
    </div>

    <div class="button-group">
      <a href="/" class="secondary-button">Return to Home</a>
    </div>
  </div>

<script>
  // Tab switching functionality
  document.querySelectorAll('.tab-button').forEach(button => {
    button.addEventListener('click', () => {
      // Remove active class from all buttons and tabs
      document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
      document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
      
      // Add active class to clicked button and corresponding tab
      button.classList.add('active');
      const tabId = button.getAttribute('data-tab');
      document.getElementById(tabId).classList.add('active');
    });
  });

  // Tier deletion with confirmation
    document.querySelectorAll('.delete-tier').forEach(button => {
      button.addEventListener('click', async (e) => {
        const tierId = e.target.getAttribute('data-tier-id');
        
        if (confirm('Are you sure you want to delete this pricing tier?')) {
          try {
            const response = await fetch('/admin/deleteVolumeTier', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ tierId })
            });
            
            const result = await response.json();
            
            if (result.success) {
              // Refresh the page or update the UI
              window.location.reload();
            } else {
              alert(`Error: ${result.message}`);
            }
          } catch (err) {
            alert('Failed to delete tier. Please try again.');
          }
        }
      });
    });

  // Auto-calculate prices based on base prices when adding new tier
  document.querySelector('.add-tier-form form').addEventListener('submit', (e) => {
    const userCount = parseInt(document.querySelector('.add-tier-form input[name="userCount"]').value);
    const volumeDiscount = parseFloat(document.querySelector('.add-tier-form input[name="volumeDiscount"]').value) / 100;
    
    if (isNaN(userCount) || isNaN(volumeDiscount)) {
      alert('Please enter valid numbers for user count and discount');
      e.preventDefault();
      return;
    }

    // Optional: You could add client-side price calculation here
    // based on the base prices before form submission
  });

  // Currency conversion helper (optional)
  function convertCurrency(amount, fromCurrency, toCurrency) {
    const rates = {
      GBP: <%= rawCurrencies.GBP %>,
      USD: <%= rawCurrencies.USD %>,
      EUR: <%= rawCurrencies.EUR %>
    };
    
    if (!rates[fromCurrency] || !rates[toCurrency]) {
      console.error('Invalid currency specified');
      return amount;
    }
    
    // Convert to GBP first, then to target currency
    return (amount / rates[fromCurrency]) * rates[toCurrency];
  }

  // Example usage of currency conversion (optional)
  document.querySelectorAll('[data-currency-convert]').forEach(element => {
    element.addEventListener('change', (e) => {
      const fromCurrency = element.getAttribute('data-currency-from');
      const toCurrency = element.getAttribute('data-currency-to');
      const targetElement = document.querySelector(element.getAttribute('data-currency-convert'));
      
      const convertedValue = convertCurrency(
        parseFloat(element.value) || 0,
        fromCurrency,
        toCurrency
      );
      
      targetElement.value = convertedValue.toFixed(2);
    });
  });

  document.querySelectorAll('[name^="subscriptions["]').forEach(input => {
  input.addEventListener('change', () => {
    // Get all base price values
    const basePrices = {};
    document.querySelectorAll('[name^="subscriptions["]').forEach(inp => {
      const currency = inp.name.match(/\[(.*?)\]/)[1];
      basePrices[currency] = parseFloat(inp.value) || 0;
    });
    
    // Update the preview for each tier
    document.querySelectorAll('.variable-card').forEach(card => {
      const userCountInput = card.querySelector('input[name$="[userCount]"]');
      const discountInput = card.querySelector('input[name$="[volumeDiscount]"]');
      
      if (userCountInput && discountInput) {
        const userCount = parseInt(userCountInput.value) || 0;
        const discount = (parseFloat(discountInput.value) || 0) / 100;
        
        // Update each currency price in the tier
        Object.keys(basePrices).forEach(currency => {
          const priceInput = card.querySelector(`input[name$="[subscriptions][${currency}]"]`);
          if (priceInput) {
            const calculatedPrice = (basePrices[currency] * userCount) * (1 - discount);
            priceInput.value = calculatedPrice.toFixed(2);
          }
        });
      }
    });
  });
});
</script>
</body>
</html>