<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Subscription Calculator</title>
  <link rel="stylesheet" href="/styles.css" />
  <style>
    button{
      margin-top:20px;
    }
    /* Style for error message */
    .error-message {
        color: red;
        font-weight: bold;
        margin-top: 5px;
        display: block;
    }
  </style>
</head>
<body>
  <div class="calcDiv">
    <h1>Subscription Calculator</h1>
    <form id="calculator-form" action="/calculate" method="POST">
      <label for="amount">Number of Subscribers:</label>
      <input type="number" id="amount" name="amount" required />
      <!-- Placeholder for error message -->
      <span id="amount-error" class="error-message" style="display: none;"></span>

      <label for="currency">Currency:</label>
      <select id="currency" name="currency" required>
        <option value="GBP">GBP</option>
        <option value="USD">USD</option>
        <option value="EUR">EUR</option>
      </select>

      <!-- Display commitment options as static text, send default value -->
      <label>Commitment Period Options:</label>
      <div style="border: 1px solid #ccc; padding: 10px; border-radius: 4px; background-color: #f9f9f9;">
        <ul style="list-style-type: none; padding-left: 0;">
          <% commitmentOptions.forEach(opt => { %>
            <li><%= opt.label %> - <%= (opt.value).toFixed(1) %>% discount</li>
          <% }) %>
        </ul>
      </div>
      <!-- Hidden input to send a default or specific commitment discount -->
      <!-- For this example, we'll use the first option's value, or 0 if none -->
      <input type="hidden" name="commitmentDiscount" value="<%= (commitmentOptions.length > 0 ? commitmentOptions[0].value * 100 : 0) %>" />

      <!-- --- Modified: Use the fetched title for the checkbox label --->
      <label>
        <input type="checkbox" id="isCurrentSubscriber" name="isCurrentSubscriber" />
        <%= additionalDiscountTitle %> (<%= additionalDiscountValue.toFixed(1) %>% discount)
      </label>
      <!-- --- End Modification --->

      <!-- --- NEW PROMO CODE INPUT --- -->
      <div class="promo-code-section" style="margin-top: 20px;">
        <label for="promo-code-input">Promo Code:</label>
        <input type="text" id="promo-code-input" name="promoCode" placeholder="Enter promo code" />
        <button type="button" id="apply-promo-button">Apply</button>
        <span id="promo-message" style="margin-left: 10px; font-weight: bold;"></span>
        <input type="hidden" id="promo-discount-value" name="promoDiscountApplied" value="0" /> <!-- Hidden field to track applied discount -->
        <input type="hidden" id="promo-description-value" name="promoDescriptionApplied" value="" /> <!-- Hidden field for description -->
      </div>
      <!-- --- END NEW PROMO CODE INPUT --- -->

      <div class="button-group">
        <a href="/" class="secondary-button">Return</a>
        <button type="submit">Submit</button>
      </div>
    </form>
  </div>
  <script>
    (function() {
      'use strict';
      async function applyDynamicStyles() {
        try {
          const response = await fetch('/api/site-styles');
          if (response.ok) {
            const styles = await response.json();
            const root = document.documentElement;
            if (styles.primaryColor) root.style.setProperty('--primary-color', styles.primaryColor);
            if (styles.primaryHoverColor) root.style.setProperty('--primary-hover-color', styles.primaryHoverColor);
            if (styles.secondaryColor) root.style.setProperty('--secondary-color', styles.secondaryColor);
            if (styles.secondaryTextColor) root.style.setProperty('--secondary-text-color', styles.secondaryTextColor);
            if (styles.secondaryHoverColor) root.style.setProperty('--secondary-hover-color', styles.secondaryHoverColor);
            if (styles.backgroundColor) root.style.setProperty('--background-color', styles.backgroundColor);
            if (styles.containerColor) root.style.setProperty('--container-color', styles.containerColor);
            if (styles.textColor) root.style.setProperty('--text-color', styles.textColor);
            if (styles.linkColor) root.style.setProperty('--link-color', styles.linkColor);
            if (styles.linkHoverColor) root.style.setProperty('--link-hover-color', styles.linkHoverColor);
            if (styles.infoIconColor) root.style.setProperty('--info-icon-color', styles.infoIconColor);
            if (styles.infoIconHoverColor) root.style.setProperty('--info-icon-hover-color', styles.infoIconHoverColor);
          } else {
            console.log('No custom styles found or error fetching them (Status: ' + response.status + ').');
          }
        } catch (error) {
          console.error('Error applying dynamic styles:', error);
        }
      }

      // Use 'readystatechange' for potentially even earlier execution
      if (document.readyState === 'loading') {
        // DOM is still loading, add listener for interactive state
        document.addEventListener('readystatechange', function() {
          if (document.readyState === 'interactive') {
             applyDynamicStyles();
          }
        });
      } else {
        // DOM is already interactive or complete
        applyDynamicStyles();
      }
    })();

    // --- PROMO CODE VALIDATION SCRIPT ---
    document.addEventListener('DOMContentLoaded', () => {
      const promoCodeInput = document.getElementById('promo-code-input');
      const applyPromoButton = document.getElementById('apply-promo-button');
      const promoMessage = document.getElementById('promo-message');
      const promoDiscountValue = document.getElementById('promo-discount-value');
      const promoDescriptionValue = document.getElementById('promo-description-value');
      const calculatorForm = document.getElementById('calculator-form');
      const amountInput = document.getElementById('amount');
      const amountError = document.getElementById('amount-error');

      // --- NEW: Subscriber Count Validation ---
      function validateSubscriberCount() {
          const value = parseInt(amountInput.value, 10);
          if (isNaN(value) || value < 100 || value > 100000) {
              amountError.textContent = 'Please enter a number between 100 and 100,000.';
              amountError.style.display = 'block';
              // Prevent form submission by disabling the button or adding a flag
              // Disabling the button is simpler
              document.querySelector('button[type="submit"]').disabled = true;
              return false; // Indicate validation failure
          } else {
              amountError.style.display = 'none';
              document.querySelector('button[type="submit"]').disabled = false;
              return true; // Indicate validation success
          }
      }

      // Attach validation to input and change events for real-time feedback
      amountInput.addEventListener('input', validateSubscriberCount);
      amountInput.addEventListener('change', validateSubscriberCount); // Covers paste, etc.

      // Initial validation in case a value is pre-filled (though unlikely here)
      // validateSubscriberCount();
      // --- END NEW VALIDATION ---

      if (applyPromoButton && promoCodeInput) {
        applyPromoButton.addEventListener('click', async () => {
          const code = promoCodeInput.value.trim();
          if (!code) {
            promoMessage.textContent = 'Please enter a promo code.';
            promoMessage.style.color = 'red';
            return;
          }

          applyPromoButton.disabled = true;
          applyPromoButton.textContent = 'Applying...';
          promoMessage.textContent = '';
          promoDiscountValue.value = '0'; // Reset hidden discount value
          promoDescriptionValue.value = ''; // Reset hidden description

          try {
            const response = await fetch('/api/validate-promo-code', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ code: code })
            });

            const data = await response.json();
            if (data.isValid) {
              promoMessage.textContent = `Promo code applied! ${data.discountPercentage.toFixed(2)}% discount.`;
              if (data.description) {
                 promoMessage.textContent += ` (${data.description})`;
              }
              promoMessage.style.color = 'green';
              promoDiscountValue.value = data.discountPercentage.toFixed(2); // Store discount
              promoDescriptionValue.value = data.description || ''; // Store description
            } else {
              promoMessage.textContent = data.message || 'Invalid or expired promo code.';
              promoMessage.style.color = 'red';
            }
          } catch (err) {
            console.error('Error validating promo code:', err);
            promoMessage.textContent = 'Error validating promo code.';
            promoMessage.style.color = 'red';
          } finally {
            applyPromoButton.disabled = false;
            applyPromoButton.textContent = 'Apply';
          }
        });
      }

      // --- MODIFIED: Add form submission validation ---
       calculatorForm.addEventListener('submit', (e) => {
          // Validate subscriber count on submit
          if (!validateSubscriberCount()) {
             e.preventDefault(); // Stop the form from submitting
             // Scroll to the error message for visibility
             amountInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
             amountInput.focus(); // Put focus on the problematic input
             return; // Exit the submit handler
          }

          // Optional: Prevent submission if promo code message indicates an error
          // and the code field is not empty (requires server-side validation anyway)
          // This is just a client-side hint.
          if (promoCodeInput.value.trim() && promoMessage.style.color === 'red') {
             const confirmSubmit = confirm('The promo code seems invalid. Do you want to submit anyway without the promo code discount?');
             if (!confirmSubmit) {
                e.preventDefault(); // Stop the form from submitting
                return; // Exit the submit handler
             }
             // If user confirms, clear the invalid promo code data before submitting
             promoDiscountValue.value = '0';
             promoDescriptionValue.value = '';
             promoCodeInput.value = ''; // Clear the input field
             promoMessage.textContent = ''; // Clear the message
          }
       });
       // --- END MODIFICATION ---
    });
    // --- END PROMO CODE VALIDATION SCRIPT ---
  </script>
</body>
</html>