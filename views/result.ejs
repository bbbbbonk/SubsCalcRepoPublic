<!-- result.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Calculation Result</title>
  <link rel="stylesheet" href="/styles.css" />
  <script>
    (function() {
      'use strict';
      async function applyDynamicStyles() {
        try {
          const response = await fetch('/api/site-styles');
          if (response.ok) {
            const styles = await response.json();
            const root = document.documentElement;
            if (styles.primaryColor) root.style.setProperty('--primary-color', styles.primaryColor);
            if (styles.primaryHoverColor) root.style.setProperty('--primary-hover-color', styles.primaryHoverColor);
            if (styles.secondaryColor) root.style.setProperty('--secondary-color', styles.secondaryColor);
            if (styles.secondaryTextColor) root.style.setProperty('--secondary-text-color', styles.secondaryTextColor);
            if (styles.secondaryHoverColor) root.style.setProperty('--secondary-hover-color', styles.secondaryHoverColor);
            if (styles.backgroundColor) root.style.setProperty('--background-color', styles.backgroundColor);
            if (styles.containerColor) root.style.setProperty('--container-color', styles.containerColor);
            if (styles.textColor) root.style.setProperty('--text-color', styles.textColor);
            if (styles.linkColor) root.style.setProperty('--link-color', styles.linkColor);
            if (styles.linkHoverColor) root.style.setProperty('--link-hover-color', styles.linkHoverColor);
            if (styles.infoIconColor) root.style.setProperty('--info-icon-color', styles.infoIconColor);
            if (styles.infoIconHoverColor) root.style.setProperty('--info-icon-hover-color', styles.infoIconHoverColor);
          } else {
            console.log('No custom styles found or error fetching them (Status: ' + response.status + ').');
          }
        } catch (error) {
          console.error('Error applying dynamic styles:', error);
        }
      }
      // Use 'readystatechange' for potentially even earlier execution
      if (document.readyState === 'loading') {
        // DOM is still loading, add listener for interactive state
        document.addEventListener('readystatechange', function() {
          if (document.readyState === 'interactive') {
             applyDynamicStyles();
          }
        });
      } else {
        // DOM is already interactive or complete
        applyDynamicStyles();
      }
    })();
  </script>
  <style>
    .resultDiv {
  max-width: 900px; /* Increased from 800px */
  width: 90%;
  margin: 30px auto; /* Increased top/bottom margin */
  padding: 50px 60px; /* Increased padding for spacious feel */
  background-color: var(--container-color);
  border-radius: 12px;
  box-shadow: var(--box-shadow);
}

/* Headings and paragraphs: More breathing room */
.resultDiv h1 {
  text-align: center;
  margin-bottom: 24px;
  color: var(--primary-color);
}

.resultDiv p {
  margin-bottom: 16px; /* Increased spacing between paragraphs */
  line-height: 1.6;
}

/* Price Comparison Table: Enhanced spacing and borders */
.price-comparison {
  border: 1px solid var(--border-color-light);
  border-radius: 10px;
  overflow: hidden;
  background-color: white; /* Ensures clean background */
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08); /* Subtle shadow */
}

/* Table Rows */
.price-row {
  display: flex;
  border-bottom: 1px solid var(--border-color-light); /* Clear horizontal lines */
  cursor: pointer;
  transition: background-color 0.2s ease, box-shadow 0.2s ease;
  align-items: center; /* Vertically center content */
}

/* Remove bottom border from the last row to avoid double line */
.price-row:last-child {
  border-bottom: none;
}

/* Hover and Selected States */
.price-row:hover {
  background-color: var(--price-row-hover-bg);
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.1);
}

.price-row.selected {
  background-color: var(--price-row-selected-bg);
  border-left: 5px solid var(--primary-color); /* Stronger indicator */
}

.price-row.selected::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  background-color: var(--primary-color);
}

/* Header Row - Make it stand out */
.price-row.header-row {
  background-color: var(--price-row-header-bg);
  font-weight: 600;
  font-size: 1.1rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  border-bottom: 2px solid var(--border-color-dark); /* Stronger header separator */
  color: var(--text-color);
}

/* Table Columns - Increased width and spacing */
.col-period {
  flex: 2.5; /* Give more space to the period */
  font-weight: 500;
}

.col-discount,
.col-monthly,
.col-annual,
.col-per-user {
  flex: 1.3; /* Increased from 1 for more column space */
  text-align: right;
  padding-left: 10px; /* Space between columns */
}

/* Optional: Add subtle vertical separators between data columns */
.price-row:not(.header-row) .col-discount,
.price-row:not(.header-row) .col-monthly,
.price-row:not(.header-row) .col-annual {
  border-right: 1px dashed var(--border-color-light); /* Dashed line for separation */
  margin-right: 1px;
  padding-right: 15px;
}

  </style>
</head>
<body>
  <div class="resultDiv"> <!-- This class in CSS provides the wider layout -->
    <h2>Calculation Result</h2>
    <p><strong>Subscribers:</strong> <span id="subscriberAmount"><%= amount %></span></p>
    <p><strong>Currency:</strong> <span id="selectedCurrency"><%= currency %></span></p>

    <!-- Display Subscriber Discount if applicable -->
    <% if (locals.subscriberDiscount && subscriberDiscount > 0) { %>
      <p><strong><%= subscriberDiscountTitle %>:</strong> <%= Number(subscriberDiscount).toFixed(1) %>%</p>
    <% } %>
    <!-- --- End Modification --->

    <!-- Display Promo Code Information -->
    <% if (locals.promoDiscount && promoDiscount > 0) { %>
      <p>
        <strong>Promo Code Applied:</strong>
        (<%= Number(promoDiscount).toFixed(1) %>% discount<%= locals.promoDescription ? ` - ${promoDescription}` : '' %>)
      </p>
    <% } else if (locals.promoCode && promoCode) { %>
       <!-- If a code was submitted but found invalid/expired -->
       <p><strong>Promo Code Attempted:</strong> <%= promoCode %> (Invalid or expired)</p>
    <% } %>

    <h3>Price Comparison</h3>
    <!-- The price-comparison div uses flexbox and the wider container for layout -->
    <div class="price-comparison" id="priceComparison">
      <div class="price-row header-row">
        <div class="col-period">Commitment Period</div>
        <div class="col-discount">Discount</div>
        <div class="col-monthly">Monthly</div>
        <div class="col-annual">Annual</div>
        <div class="col-per-user">Per User/Month</div>
      </div>
      <% allPrices.forEach(price => { %>
        <div class="price-row <%= price.isSelected ? 'selected' : '' %>" data-option-key="<%= price.key %>">
          <div class="col-period"><%= price.label %></div>
          <div class="col-discount"><%= (price.value * 100).toFixed(1) %>%</div>
          <div class="col-monthly"><%= currency %> <%= parseFloat(price.monthlyPrice).toFixed(2) %></div>
          <div class="col-annual"><%= currency %> <%= parseFloat(price.annualPrice).toFixed(2) %></div>
          <div class="col-per-user"><%= currency %> <%= parseFloat(price.pricePerUser).toFixed(4) %></div>
        </div>
      <% }); %>
    </div>

    <h3>Selected Option Summary</h3>
    <div class="summary" id="summarySection">
      <% const displayOption = selectedOption; %>
      <p><strong>Commitment Period:</strong> <span id="summaryPeriod"><%= displayOption.label %></span></p>
      <p><strong>Commitment Discount:</strong> <span id="summaryDiscount"><%= (displayOption.value * 100).toFixed(1) %></span>%</p>
      <p><strong>Monthly Price:</strong> <span id="summaryCurrency"><%= currency %></span> <span id="summaryMonthlyPrice"><%= parseFloat(displayOption.monthlyPrice).toFixed(2) %></span></p>
      <p><strong>Annual Price:</strong> <span id="summaryCurrency2"><%= currency %></span> <span id="summaryAnnualPrice"><%= parseFloat(displayOption.annualPrice).toFixed(2) %></span></p>
      <p><strong>Price Per User/Month:</strong> <span id="summaryCurrency3"><%= currency %></span> <span id="summaryPricePerUser"><%= parseFloat(displayOption.pricePerUser).toFixed(4) %></span></p>
    </div>
    <button id="saveQuoteBtn" class="primary-button">Save All Quote Prices</button>
    <a href="/" class="secondary-button">Return</a>
  </div>

  <!-- Save Quote Modal -->
  <div id="saveQuoteModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h3>Save Quote</h3>
      <div id="saveQuoteMessage"></div>
      <label for="customerNameInput">Customer Name:</label>
      <input type="text" id="customerNameInput" placeholder="Enter customer name" />
      <label for="customerEmailInput">Customer Email:</label>
      <input type="email" id="customerEmailInput" placeholder="Enter customer email" />
      <button id="confirmSaveQuoteBtn" class="primary-button">Confirm & Save</button>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Existing variable declarations remain the same
      const priceComparisonDiv = document.getElementById('priceComparison');
      const modal = document.getElementById("saveQuoteModal");
      const btn = document.getElementById("saveQuoteBtn");
      const span = document.getElementsByClassName("close")[0];
      const confirmBtn = document.getElementById("confirmSaveQuoteBtn");
      const customerNameInput = document.getElementById("customerNameInput");
      const customerEmailInput = document.getElementById("customerEmailInput"); // New Email Input Field
      const saveQuoteMessage = document.getElementById("saveQuoteMessage");
      // Get subscriber amount and currency from the page
      const subscriberAmount = parseInt(document.getElementById('subscriberAmount').textContent) || 0;
      const selectedCurrency = document.getElementById('selectedCurrency').textContent || 'USD';
      // Parse the allPricesForJS data passed from the server
      const allPricesData = JSON.parse('<%- JSON.stringify(allPrices) %>');
      // Function to save quote
      async function saveQuote(customerName, customerEmail) {
        try {
          // Prepare QuotePrice object with all commitment options
          const quotePrice = {};
          for (const priceData of allPricesData) {
            // Use the label as the key (e.g., "1 Years") and the annualPrice as the value
            quotePrice[priceData.label] = parseFloat(priceData.annualPrice).toFixed(2);
          }
          // Prepare data to send to the server
          const quoteData = {
            QuoteCustomerName: customerName,
            QuotePrice: quotePrice, // Send all prices as an object
            QuoteUserAmount: subscriberAmount.toString(), // Send amount as string
            QuoteCurrency: selectedCurrency, // Send currency
            QuoteCustomerEmail: customerEmail // Include email in data sent to server
          };
          const response = await fetch('/save-quote', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(quoteData)
          });
          const result = await response.json();
          if (response.ok) {
            alert(`Quote saved successfully! ID: ${result.quoteId}`);
            modal.style.display = "none"; // Close modal on success
          } else {
            saveQuoteMessage.textContent = result.message || "Failed to save quote.";
            saveQuoteMessage.style.display = "block";
          }
        } catch (error) {
          console.error('Error saving quote:', error);
          saveQuoteMessage.textContent = "An error occurred while saving the quote.";
          saveQuoteMessage.style.display = "block";
        }
      }
      // When the user clicks the save quote button, open the modal
      btn.onclick = function () {
        modal.style.display = "block";
      }
      // When the user clicks on <span> (x), close the modal
      span.onclick = function () {
        modal.style.display = "none";
      }
      // When the user clicks anywhere outside of the modal, close it
      window.onclick = function (event) {
        if (event.target == modal) {
          modal.style.display = "none";
        }
      }
      // Handle confirm save button click
      confirmBtn.onclick = function () {
        const customerName = customerNameInput.value.trim();
        const customerEmail = customerEmailInput.value.trim(); // Get email value
        if (!customerName) {
          saveQuoteMessage.textContent = "Customer name is required.";
          saveQuoteMessage.style.display = "block";
          return;
        }
        // Basic email validation (you can use a more robust regex if needed)
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!customerEmail || !emailRegex.test(customerEmail)) {
          saveQuoteMessage.textContent = "Please enter a valid email address.";
          saveQuoteMessage.style.display = "block";
          return;
        }
        saveQuote(customerName, customerEmail); // Pass both name and email
      };
      // - End Save Quote Function -

      // Event delegation for clicks on price rows (existing functionality)
      priceComparisonDiv.addEventListener('click', function (event) {
        // Find the closest .price-row ancestor of the clicked element
        const clickedRow = event.target.closest('.price-row');
        // Check if the clicked element is a data row (not the header)
        if (clickedRow && !clickedRow.classList.contains('header-row')) {
          // Remove selected class from all rows
          document.querySelectorAll('.price-row').forEach(row => {
            row.classList.remove('selected');
          });
          // Add selected class to clicked row
          clickedRow.classList.add('selected');
          // Update summary with clicked row data
          const key = clickedRow.getAttribute('data-option-key');
          const selectedData = allPricesData.find(p => p.key === key);
          if (selectedData) {
            document.getElementById('summaryPeriod').textContent = selectedData.label;
            document.getElementById('summaryDiscount').textContent = (selectedData.value * 100).toFixed(1);
            document.getElementById('summaryMonthlyPrice').textContent = parseFloat(selectedData.monthlyPrice).toFixed(2);
            document.getElementById('summaryAnnualPrice').textContent = parseFloat(selectedData.annualPrice).toFixed(2);
            document.getElementById('summaryPricePerUser').textContent = parseFloat(selectedData.pricePerUser).toFixed(4);
            // Update currency display if needed (though unlikely to change)
            const currencyDisplays = document.querySelectorAll('#summaryCurrency, #summaryCurrency2, #summaryCurrency3');
            currencyDisplays.forEach(el => el.textContent = selectedCurrency);
          }
        }
      });
    });
  </script>
</body>
</html>