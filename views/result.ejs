<!-- result.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Calculation Result</title>
  <link rel="stylesheet" href="/styles.css" />
  <style>
    /* - Updated Styles for Spaciousness and Width - */
    .resultDiv {
      /* Make container wider and center it */
      max-width: 800px;
      width: 90%;
      margin: 20px auto;
      /* Increase internal padding */
      padding: 40px 50px;
      /* Slightly larger base font */
      font-size: 1.1rem;
      /* Keep existing styles */
      background-color: #ffffff;
      color: rgb(0, 0, 0);
      border-radius: 12px;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
      box-sizing: border-box; /* Include padding in width calculation */
      text-align: left; /* Change default text alignment */
    }

    .resultDiv h2 {
      /* Larger heading */
      font-size: 1.8rem;
      text-align: center; /* Keep heading centered */
      margin-bottom: 25px;
    }

    .resultDiv h3 {
      /* Larger sub-heading */
      font-size: 1.4rem;
      margin-top: 30px;
      margin-bottom: 15px;
    }

    .resultDiv p {
      /* Add some space below paragraphs */
      margin-bottom: 12px;
    }

    .price-comparison {
      /* Increase margin above and below the table */
      margin: 30px 0 20px 0;
      border: 1px solid #ddd;
      border-radius: 8px;
      overflow: hidden;
    }

    .price-row {
      display: flex;
      padding: 15px 20px;
      border-bottom: 1px solid #eee;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .price-row:hover {
      background-color: #f5f5f5;
    }

    .price-row.selected {
      background-color: #e6f7ff;
      border-left: 4px solid #1890ff;
    }

    .price-row.header-row {
      background-color: #fafafa;
      font-weight: bold;
      border-bottom: 2px solid #ddd;
    }

    .col-period {
      flex: 2;
    }

    .col-discount,
    .col-monthly,
    .col-annual,
    .col-per-user {
      flex: 1;
      /* Ensure text alignment is right */
      text-align: right;
    }

    .summary {
      /* Increase margin and padding for the summary box */
      margin: 30px 0;
      padding: 25px;
      background-color: #f9f9f9;
      border-radius: 8px;
      border: 1px solid #eee;
      /* Subtle border */
    }

    .summary p {
      /* Slightly larger font size in summary */
      font-size: 1.1rem;
      margin-bottom: 10px;
    }

    /* - End Updated Styles - */

    /* - Save Quote Modal Styles - */
    .modal {
      display: none;
      /* Hidden by default */
      position: fixed;
      z-index: 1000;
      /* Sit on top */
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      /* Enable scroll if needed */
      background-color: rgba(0, 0, 0, 0.4);
      /* Black w/ opacity */
    }

    .modal-content {
      background-color: #fefefe;
      margin: 15% auto;
      /* 15% from the top and centered */
      padding: 30px;
      border: 1px solid #888;
      border-radius: 8px;
      width: 80%;
      max-width: 500px;
      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
      position: relative;
    }

    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
      position: absolute;
      top: 15px;
      right: 20px;
    }

    .close:hover,
    .close:focus {
      color: black;
      text-decoration: none;
      cursor: pointer;
    }

    .modal-content h3 {
      margin-top: 0;
      margin-bottom: 20px;
    }

    .modal-content label {
      display: block;
      margin-bottom: 8px;
      font-weight: bold;
    }

    .modal-content input[type="text"],
    .modal-content input[type="email"] {
      width: 100%;
      padding: 12px;
      margin-bottom: 20px;
      border: 1px solid #ddd;
      border-radius: 4px;
      box-sizing: border-box;
    }

    #saveQuoteMessage {
      color: #ff4d4f;
      margin-bottom: 15px;
      display: none;
    }

    .save-quote-btn {
      background-color: #1890ff;
      color: white;
      padding: 12px 24px;
      margin: 20px 0;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1rem;
    }

    .save-quote-btn:hover {
      background-color: #40a9ff;
    }
  </style>
</head>
<body>
  <div class="resultDiv">
    <h2>Calculation Result</h2>
    <p><strong>Subscribers:</strong> <span id="subscriberAmount"><%= amount %></span></p>
    <p><strong>Currency:</strong> <span id="selectedCurrency"><%= currency %></span></p>
    <% if (subscriberDiscount > 0) { %>
      <!-- Ensure subscriberDiscount is a number before .toFixed -->
      <p><strong>Subscriber Discount:</strong> <%= Number(subscriberDiscount).toFixed(1) %>%</p>
    <% } %>

    <h3>Price Comparison</h3>
    <div class="price-comparison" id="priceComparison">
      <div class="price-row header-row">
        <div class="col-period">Commitment Period</div>
        <div class="col-discount">Discount</div>
        <div class="col-monthly">Monthly</div>
        <div class="col-annual">Annual</div>
        <div class="col-per-user">Per User/Month</div>
      </div>
      <% allPrices.forEach(price => { %>
        <div class="price-row <%= price.isSelected ? 'selected' : '' %>" data-option-key="<%= price.key %>">
          <div class="col-period"><%= price.label %></div>
          <div class="col-discount"><%= (price.value * 100).toFixed(1) %>%</div>
          <div class="col-monthly"><%= currency %> <%= parseFloat(price.monthlyPrice).toFixed(2) %></div>
          <div class="col-annual"><%= currency %> <%= parseFloat(price.annualPrice).toFixed(2) %></div>
          <div class="col-per-user"><%= currency %> <%= parseFloat(price.pricePerUser).toFixed(4) %></div>
        </div>
      <% }); %>
    </div>

    <h3>Selected Option Summary</h3>
    <div class="summary" id="summarySection">
      <% const displayOption = selectedOption; %>
      <p><strong>Commitment Period:</strong> <span id="summaryPeriod"><%= displayOption.label %></span></p>
      <p><strong>Applied Discount:</strong> <span id="summaryDiscount"><%= (displayOption.value * 100).toFixed(1) %></span>%</p>
      <p><strong>Monthly Price:</strong> <span id="summaryCurrency"><%= currency %></span> <span id="summaryMonthlyPrice"><%= parseFloat(displayOption.monthlyPrice).toFixed(2) %></span></p>
      <p><strong>Annual Price:</strong> <span id="summaryCurrency2"><%= currency %></span> <span id="summaryAnnualPrice"><%= parseFloat(displayOption.annualPrice).toFixed(2) %></span></p>
      <p><strong>Price Per User/Month:</strong> <span id="summaryCurrency3"><%= currency %></span> <span id="summaryPricePerUser"><%= parseFloat(displayOption.pricePerUser).toFixed(4) %></span></p>
    </div>

    <button id="saveQuoteBtn" class="save-quote-btn">Save All Quote Prices</button>
    <a href="/" class="secondary-button">Return</a>
  </div>

  <!-- Save Quote Modal -->
  <div id="saveQuoteModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h3>Save Quote</h3>
      <div id="saveQuoteMessage"></div>
      <label for="customerNameInput">Customer Name:</label>
      <input type="text" id="customerNameInput" placeholder="Enter customer name" />
      <label for="customerEmailInput">Customer Email:</label>
      <input type="email" id="customerEmailInput" placeholder="Enter customer email" />
      <button id="confirmSaveQuoteBtn" class="save-quote-btn">Confirm & Save</button>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Existing variable declarations remain the same
      const priceComparisonDiv = document.getElementById('priceComparison');
      const modal = document.getElementById("saveQuoteModal");
      const btn = document.getElementById("saveQuoteBtn");
      const span = document.getElementsByClassName("close")[0];
      const confirmBtn = document.getElementById("confirmSaveQuoteBtn");
      const customerNameInput = document.getElementById("customerNameInput");
      const customerEmailInput = document.getElementById("customerEmailInput"); // New Email Input Field
      const saveQuoteMessage = document.getElementById("saveQuoteMessage");

      // Get subscriber amount and currency from the page
      const subscriberAmount = parseInt(document.getElementById('subscriberAmount').textContent) || 0;
      const selectedCurrency = document.getElementById('selectedCurrency').textContent || 'USD';

      // Parse the allPricesForJS data passed from the server
      const allPricesData = JSON.parse('<%- JSON.stringify(allPrices) %>');

      // Function to save quote
      async function saveQuote(customerName, customerEmail) {
        try {
          // Prepare QuotePrice object with all commitment options
          const quotePrice = {};
          for (const priceData of allPricesData) {
            // Use the label as the key (e.g., "1 Years") and the annualPrice as the value
            quotePrice[priceData.label] = parseFloat(priceData.annualPrice).toFixed(2);
          }

          // Prepare data to send to the server
          const quoteData = {
            QuoteCustomerName: customerName,
            QuotePrice: quotePrice, // Send all prices as an object
            QuoteUserAmount: subscriberAmount.toString(), // Send amount as string
            QuoteCurrency: selectedCurrency, // Send currency
            QuoteCustomerEmail: customerEmail // Include email in data sent to server
          };

          const response = await fetch('/save-quote', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(quoteData)
          });

          const result = await response.json();

          if (response.ok) {
            alert(`Quote saved successfully! ID: ${result.quoteId}`);
            modal.style.display = "none"; // Close modal on success
          } else {
            saveQuoteMessage.textContent = result.message || "Failed to save quote.";
            saveQuoteMessage.style.display = "block";
          }
        } catch (error) {
          console.error('Error saving quote:', error);
          saveQuoteMessage.textContent = "An error occurred while saving the quote.";
          saveQuoteMessage.style.display = "block";
        }
      }

      // When the user clicks the save quote button, open the modal
      btn.onclick = function () {
        modal.style.display = "block";
      }

      // When the user clicks on <span> (x), close the modal
      span.onclick = function () {
        modal.style.display = "none";
      }

      // When the user clicks anywhere outside of the modal, close it
      window.onclick = function (event) {
        if (event.target == modal) {
          modal.style.display = "none";
        }
      }

      // Handle confirm save button click
      confirmBtn.onclick = function () {
        const customerName = customerNameInput.value.trim();
        const customerEmail = customerEmailInput.value.trim(); // Get email value

        if (!customerName) {
          saveQuoteMessage.textContent = "Customer name is required.";
          saveQuoteMessage.style.display = "block";
          return;
        }

        // Basic email validation (you can use a more robust regex if needed)
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!customerEmail || !emailRegex.test(customerEmail)) {
          saveQuoteMessage.textContent = "Please enter a valid email address.";
          saveQuoteMessage.style.display = "block";
          return;
        }

        saveQuote(customerName, customerEmail); // Pass both name and email
      };

      // - End Save Quote Function -

      // Event delegation for clicks on price rows (existing functionality)
      priceComparisonDiv.addEventListener('click', function (event) {
        // Find the closest .price-row ancestor of the clicked element
        const clickedRow = event.target.closest('.price-row');

        // Check if the clicked element is a data row (not the header)
        if (clickedRow && !clickedRow.classList.contains('header-row')) {
          // Remove selected class from all rows
          document.querySelectorAll('.price-row').forEach(row => {
            row.classList.remove('selected');
          });

          // Add selected class to clicked row
          clickedRow.classList.add('selected');

          // Update summary with clicked row data
          const key = clickedRow.getAttribute('data-option-key');
          const selectedData = allPricesData.find(p => p.key === key);
          if (selectedData) {
            document.getElementById('summaryPeriod').textContent = selectedData.label;
            document.getElementById('summaryDiscount').textContent = (selectedData.value * 100).toFixed(1);
            document.getElementById('summaryMonthlyPrice').textContent = parseFloat(selectedData.monthlyPrice).toFixed(2);
            document.getElementById('summaryAnnualPrice').textContent = parseFloat(selectedData.annualPrice).toFixed(2);
            document.getElementById('summaryPricePerUser').textContent = parseFloat(selectedData.pricePerUser).toFixed(4);
            // Update currency display if needed (though unlikely to change)
            const currencyDisplays = document.querySelectorAll('#summaryCurrency, #summaryCurrency2, #summaryCurrency3');
            currencyDisplays.forEach(el => el.textContent = selectedCurrency);
          }
        }
      });
    });
  </script>
</body>
</html>