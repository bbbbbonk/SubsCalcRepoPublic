<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title><%= fieldConfigs.formTitle?.title || 'Order Form' %></title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <div class="container">
    <h1><%= fieldConfigs.formTitle?.title || 'Order Form' %></h1>
    <div class="progress-container">
      <div id="progressBar" class="progress-bar"></div>
    </div>
    <form id="multiStepForm" action="/submit-form" method="POST">
      <!-- Step 1: Orderer Information -->
      <div class="step active">
        <fieldset>
          <legend>
            <%= fieldConfigs.ordererSectionTitle?.title || 'Orderer Information' %>
            <span class="info-icon" title="<%= tooltips.ordererInfo %>">i</span>
          </legend>
          <input type="text" name="ordererName" 
                 placeholder="<%= fieldConfigs.ordererName?.placeholder || 'Name of the person making the order' %>" 
                 <%= fieldConfigs.ordererName?.required ? 'required' : '' %>>
          <input type="email" name="ordererEmail" 
                 placeholder="<%= fieldConfigs.ordererEmail?.placeholder || 'Email of the person making the order' %>" 
                 <%= fieldConfigs.ordererEmail?.required ? 'required' : '' %>>
        </fieldset>
      </div>
      <!-- Step 2: Partner Information -->
      <div class="step">
        <fieldset>
          <legend>
            <%= fieldConfigs.partnerSectionTitle?.title || 'Partner Information' %>
            <span class="info-icon" title="<%= tooltips.partnerInfo %>">i</span>
          </legend>
          <input type="text" name="partnerCompany" 
                 placeholder="<%= fieldConfigs.partnerCompany?.placeholder || 'Partner company name' %>" 
                 <%= fieldConfigs.partnerCompany?.required ? 'required' : '' %>>
          <input type="text" name="partnerSignatory" 
                 placeholder="<%= fieldConfigs.partnerSignatory?.placeholder || 'Partner signatory name, position and email' %>" 
                 <%= fieldConfigs.partnerSignatory?.required ? 'required' : '' %>>
          <input type="text" name="partnerContactName" 
                 placeholder="<%= fieldConfigs.partnerContactName?.placeholder || 'Partner contact name' %>" 
                 <%= fieldConfigs.partnerContactName?.required ? 'required' : '' %>>
          <input type="tel" name="partnerContactPhone" 
                 placeholder="<%= fieldConfigs.partnerContactPhone?.placeholder || 'Partner contact phone number' %>" 
                 <%= fieldConfigs.partnerContactPhone?.required ? 'required' : '' %>>
          <input type="email" name="partnerContactEmail" 
                 placeholder="<%= fieldConfigs.partnerContactEmail?.placeholder || 'Partner contact email' %>" 
                 <%= fieldConfigs.partnerContactEmail?.required ? 'required' : '' %>>
        </fieldset>
      </div>
      <!-- Step 3: Customer Information -->
      <div class="step">
        <fieldset>
          <legend>
            <%= fieldConfigs.customerSectionTitle?.title || 'Customer Information' %>
            <span class="info-icon" title="<%= tooltips.customerInfo %>">i</span>
          </legend>
              <div class="import-quote-container">
                <input type="text" id="quoteCodeInput" placeholder="Enter quote ID, to import quote">
                <button type="button" id="importQuoteBtn" class="secondary-button">Import Quote from Code</button>
              </div>
          <input type="text" name="customerCompany" 
                 placeholder="<%= fieldConfigs.customerCompany?.placeholder || 'Customer company name' %>" 
                 <%= fieldConfigs.customerCompany?.required ? 'required' : '' %>>
          <input type="text" name="customerAddress" 
                 placeholder="<%= fieldConfigs.customerAddress?.placeholder || 'Registered address' %>" 
                 <%= fieldConfigs.customerAddress?.required ? 'required' : '' %>>
          <input type="text" name="customerBusinessNumber" 
                 placeholder="<%= fieldConfigs.customerBusinessNumber?.placeholder || 'Business number' %>" 
                 <%= fieldConfigs.customerBusinessNumber?.required ? 'required' : '' %>>
          <input type="text" id="customerContactName" name="customerContactName" 
                 placeholder="<%= fieldConfigs.customerContactName?.placeholder || 'Customer contact name' %>" 
                 <%= fieldConfigs.customerContactName?.required ? 'required' : '' %>>
          <input type="email" name="customerContactEmail" 
                 placeholder="<%= fieldConfigs.customerContactEmail?.placeholder || 'Customer contact email' %>" 
                 <%= fieldConfigs.customerContactEmail?.required ? 'required' : '' %>>
          <input type="tel" name="customerContactPhone" 
                 placeholder="<%= fieldConfigs.customerContactPhone?.placeholder || 'Customer contact phone number' %>" 
                 <%= fieldConfigs.customerContactPhone?.required ? 'required' : '' %>>
        </fieldset>
      </div>
      <!-- Step 4: Subscription Information -->
      <div class="step">
        <fieldset>
          <legend>
            <%= fieldConfigs.subscriptionSectionTitle?.title || 'Fresh Subscription' %>
            <span class="info-icon" title="<%= tooltips.subscriptionInfo %>">i</span>
          </legend>
          <input type="number" id="numUsers" name="numUsers" min="1" 
                 placeholder="<%= fieldConfigs.numUsers?.placeholder || 'Number of users' %>" 
                 <%= fieldConfigs.numUsers?.required ? 'required' : '' %>>
          <select id="currency" class="currencyDropdown" name="currency" 
                 <%= fieldConfigs.currency?.required ? 'required' : '' %>>
            <option value="" disabled selected>
              <%= fieldConfigs.currency?.placeholder || 'Select currency' %>
            </option>
            <option value="GBP">GBP</option>
            <option value="EUR">EUR</option>
            <option value="USD">USD</option>
          </select>
          <input type="number" id="customerPrice" step="0.01" name="customerPrice" 
                 placeholder="<%= fieldConfigs.customerPrice?.placeholder || 'Customer price' %>" 
                 <%= fieldConfigs.customerPrice?.required ? 'required' : '' %>>
          <input type="date" name="startDate" 
                 placeholder="<%= fieldConfigs.startDate?.placeholder || 'Start date' %>" 
                 <%= fieldConfigs.startDate?.required ? 'required' : '' %>>
          <input type="text" name="initialTerm" 
                 placeholder="<%= fieldConfigs.initialTerm?.placeholder || 'Initial term (months)' %>" 
                 <%= fieldConfigs.initialTerm?.required ? 'required' : '' %>>
          <input type="url" name="tenantURL" 
                 placeholder="<%= fieldConfigs.tenantURL?.placeholder || 'Client tenant URL' %>" 
                 <%= fieldConfigs.tenantURL?.required ? 'required' : '' %>>
        </fieldset>
      </div>
      <!-- Navigation Buttons -->
      <div class="navigation-buttons">
        <a href="/" id="returnBtn" class="secondary-button" style="display: none;">Return</a>
        <button type="button" id="prevBtn" class="secondary-button">Back</button>
        <button type="button" id="nextBtn" class="primary-button">Next</button>
        <button type="submit" id="submitBtn" class="primary-button" style="display: none;">Submit</button>
      </div>
      <div class="step-indicator">
        Step <span id="stepNumber">1</span> of <span id="totalSteps">4</span>
      </div>
    </form>
    <div style="color: red; font-weight: bold; margin-top: 20px;">
      Session expires in: <span id="session-timer"></span>
    </div>
  </div>

  <!-- Commitment Period Selection Modal -->
  <div id="commitmentModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <h2>Select Commitment Period</h2>
      <div id="commitmentOptions"></div>
      <button id="confirmCommitmentBtn" class="primary-button">Confirm</button>
    </div>
  </div>

<script>
  // Store the fetched quote data
  let currentQuoteData = null;

  document.getElementById('importQuoteBtn').addEventListener('click', async () => {
    const quoteCode = document.getElementById('quoteCodeInput').value.trim();
    const importBtn = document.getElementById('importQuoteBtn');
    
    if (!quoteCode) {
      showAlert('Please enter a quote code', 'error');
      return;
    }
    
    try {
      importBtn.disabled = true;
      importBtn.textContent = 'Loading...';
      
      const response = await fetch(`/get-quote/${quoteCode}`);
      const data = await response.json();
      
      if (!response.ok || !data.success) {
        throw new Error(data.message || 'Failed to import quote');
      }
      
      // Store the quote data for later use
      currentQuoteData = data;
      
      // Show commitment period selection modal
      showCommitmentModal(data.QuotePrice);
      
    } catch (error) {
      console.error('Error importing quote:', error);
      showAlert(error.message || 'Failed to import quote. Please check the code and try again.', 'error');
    } finally {
      importBtn.disabled = false;
      importBtn.textContent = 'Import Quote from Code';
    }
  });

  function showCommitmentModal(prices) {
    const modal = document.getElementById('commitmentModal');
    const optionsContainer = document.getElementById('commitmentOptions');
    
    // Clear previous options
    optionsContainer.innerHTML = '';
    
    // Create radio buttons for each commitment period
    Object.keys(prices).forEach(period => {
      const radio = document.createElement('input');
      radio.type = 'radio';
      radio.id = `period-${period.replace(/\s+/g, '-')}`;
      radio.name = 'commitmentPeriod';
      radio.value = period;
      radio.className = 'commitment-option';
      
      const label = document.createElement('label');
      label.htmlFor = `period-${period.replace(/\s+/g, '-')}`;
      label.textContent = `${period}: ${prices[period]} ${currentQuoteData.QuoteCurrency || ''}`;
      label.className = 'commitment-option';
      
      optionsContainer.appendChild(radio);
      optionsContainer.appendChild(label);
    });
    
    // Select the first option by default
    if (optionsContainer.firstChild) {
      optionsContainer.firstChild.checked = true;
    }
    
    modal.style.display = 'block';
  }

  // Close modal when clicking X
  document.querySelector('.close').addEventListener('click', () => {
    document.getElementById('commitmentModal').style.display = 'none';
  });

  // Close modal when clicking outside
  window.addEventListener('click', (event) => {
    const modal = document.getElementById('commitmentModal');
    if (event.target === modal) {
      modal.style.display = 'none';
    }
  });

  // Handle confirmation
  document.getElementById('confirmCommitmentBtn').addEventListener('click', () => {
    const selectedRadio = document.querySelector('input[name="commitmentPeriod"]:checked');
    
    if (!selectedRadio) {
      showAlert('Please select a commitment period', 'error');
      return;
    }
    
    const selectedPeriod = selectedRadio.value;
    fillFormWithQuoteData(selectedPeriod);
    
    // Close modal
    document.getElementById('commitmentModal').style.display = 'none';
  });

  function fillFormWithQuoteData(period) {
    if (!currentQuoteData) return;
    
    // Extract year count from period string (e.g., "2 Year" -> 2)
    const yearMatch = period.match(/(\d+)\s*Year/i);
    const years = yearMatch ? parseInt(yearMatch[1]) : 1;
    
    // Fill form fields
    document.getElementById('customerContactName').value = currentQuoteData.customerContactName || '';
    document.getElementById('numUsers').value = currentQuoteData.numUsers || '';
    document.getElementById('currency').value = currentQuoteData.currency || '';
    document.getElementById('customerPrice').value = currentQuoteData.QuotePrice[period] || '';
    document.querySelector('input[name="initialTerm"]').value = years * 12; // Convert years to months
    
    showAlert(`Quote data imported successfully with ${period} commitment!`, 'success');
  }

  // Helper function to show alerts
  function showAlert(message, type) {
    // Remove any existing alerts
    const existingAlert = document.querySelector('.import-alert');
    if (existingAlert) {
      existingAlert.remove();
    }
    const alertDiv = document.createElement('div');
    alertDiv.className = `import-alert alert-${type}`;
    alertDiv.textContent = message;
    // Insert after the import container
    const importContainer = document.querySelector('.import-quote-container');
    importContainer.insertAdjacentElement('afterend', alertDiv);
    // Auto-remove after 5 seconds
    setTimeout(() => {
      alertDiv.remove();
    }, 5000);
  }

    // Session timer
    let secondsRemaining = 900;
    function updateTimer() {
      const minutes = Math.floor(secondsRemaining / 60);
      const seconds = secondsRemaining % 60;
      document.getElementById("session-timer").textContent =
        `${minutes}:${seconds.toString().padStart(2, '0')}`;
      if (secondsRemaining > 0) {
        secondsRemaining--;
      } else {
        alert("Session expired. Redirecting to login.");
        window.location.href = "/login";
      }
    }
    setInterval(updateTimer, 1000);
    // Form Wizard Functionality
    const steps = document.querySelectorAll('.step');
    let currentStep = 0;
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const submitBtn = document.getElementById('submitBtn');
    const returnBtn = document.getElementById('returnBtn');
    const stepNumber = document.getElementById('stepNumber');
    const totalSteps = document.getElementById('totalSteps');
    const progressBar = document.getElementById('progressBar');
    const form = document.getElementById('multiStepForm');
    form.addEventListener('submit', (event) => {
      if (!validateStep()) {
        event.preventDefault();
      }
    });
    totalSteps.textContent = steps.length;
    function updateProgress(index) {
      const percent = (index / (steps.length - 1)) * 100;
      progressBar.style.width = `${percent}%`;
    }
    function showStep(index) {
      steps.forEach((step, i) => {
        step.classList.toggle('active', i === index);
      });
      stepNumber.textContent = index + 1;
      const isFirst = index === 0;
      const isLast = index === steps.length - 1;
      prevBtn.style.display = isFirst ? 'none' : 'inline-block';
      returnBtn.style.display = isFirst ? 'inline-block' : 'none';
      nextBtn.style.display = isLast ? 'none' : 'inline-block';
      submitBtn.style.display = isLast ? 'inline-block' : 'none';
      updateProgress(index);
    }
    function validateStep() {
      const inputs = steps[currentStep].querySelectorAll('input, select, textarea');
      let valid = true;
      inputs.forEach(input => {
        if (!input.checkValidity()) {
          input.classList.add('show-error');
          valid = false;
        } else {
          input.classList.remove('show-error');
        }
      });
      if (!valid) {
        const firstInvalid = [...inputs].find(i => !i.checkValidity());
        firstInvalid?.reportValidity();
      }
      return valid;
    }
    prevBtn.addEventListener('click', () => {
      if (currentStep > 0) {
        currentStep--;
        showStep(currentStep);
      }
    });
    nextBtn.addEventListener('click', () => {
      if (!validateStep()) return;
      if (currentStep < steps.length - 1) {
        currentStep++;
        showStep(currentStep);
      }
    });
    // Initialize
    showStep(currentStep);
      (function() {
    'use strict';
    // Function to fetch and apply styles
    async function applyDynamicStyles() {
      try {
        // Fetch styles from the server endpoint
        const response = await fetch('/api/site-styles');
        if (response.ok) {
          const styles = await response.json();
          const root = document.documentElement;

          // Apply fetched styles to CSS variables
          // Make sure the property names here match exactly:
          // 1. The keys returned by your /api/site-styles endpoint
          // 2. The CSS variable names defined in :root in styles.css
          if (styles.primaryColor) root.style.setProperty('--primary-color', styles.primaryColor);
          if (styles.primaryHoverColor) root.style.setProperty('--primary-hover-color', styles.primaryHoverColor);
          if (styles.secondaryColor) root.style.setProperty('--secondary-color', styles.secondaryColor);
          if (styles.secondaryTextColor) root.style.setProperty('--secondary-text-color', styles.secondaryTextColor);
          if (styles.secondaryHoverColor) root.style.setProperty('--secondary-hover-color', styles.secondaryHoverColor);
          if (styles.backgroundColor) root.style.setProperty('--background-color', styles.backgroundColor);
          if (styles.containerColor) root.style.setProperty('--container-color', styles.containerColor);
          if (styles.textColor) root.style.setProperty('--text-color', styles.textColor);
          if (styles.linkColor) root.style.setProperty('--link-color', styles.linkColor);
          if (styles.linkHoverColor) root.style.setProperty('--link-hover-color', styles.linkHoverColor);
          if (styles.infoIconColor) root.style.setProperty('--info-icon-color', styles.infoIconColor);
          if (styles.infoIconHoverColor) root.style.setProperty('--info-icon-hover-color', styles.infoIconHoverColor);
          // Add assignments for any other dynamic colors you have defined
        } else {
          console.log('No custom styles found or error fetching them (Status: ' + response.status + ').');
        }
      } catch (error) {
        console.error('Error applying dynamic styles:', error);
        // Fail gracefully, default CSS variables or static CSS will be used
      }
    }

    // Call the function when the page loads
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', applyDynamicStyles);
    } else {
      applyDynamicStyles();
    }
  })();
  </script>
</body>
</html>